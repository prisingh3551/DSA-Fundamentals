public class ReverseLL {
	public class Node {
		Node next;
		int val;
		Node(int v) {
			this.val = v;
			this.next = null;
		}
		Node(int v, Node n) {
			this.val = v;
			this.next = n;
		}
	}
	public static Node arrToLL(int arr[]) {
		Node head = new Node(arr[0]);
		Node tmp = head;
		for(int i = 1; i < arr.length; ++i) {
			tmp.next = new Node(arr[i]);
			tmp = tmp.next;
		}
		return head;
	}
	public static Node reverse(Node head) {
		if(head == null || head.next == null) {
			return head;
		}
		Node newHead = reverse(head.next);
		Node front = head.next;
		front.next = head;
		head.next = null;
		return newHead;
	}
	public static void printLL(Node head) {
		if(head == null) return;
		Node tmp = head;
		while(tmp != null) {
			System.out.println(tmp.val);
			tmp = tmp.next;
		}
	}
	public static void main(String args[]) {
		int arr[] = {1, 3, 5, 2, 8, 10, 19};
		Node head = arrToLL(arr);
		System.out.println("Original linked list is: );
		printLL(head);
		Node rev = reverse(head);
		System.out.println("Reversed linked list is: );
		printLL(rev);
	}
}
